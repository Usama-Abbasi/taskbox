[{"D:\\React Projects\\taskbox\\src\\index.tsx":"1","D:\\React Projects\\taskbox\\src\\reportWebVitals.ts":"2","D:\\React Projects\\taskbox\\src\\App.tsx":"3","D:\\React Projects\\taskbox\\src\\redux.tsx":"4","D:\\React Projects\\taskbox\\src\\components\\InboxScreen\\InboxScreen.tsx":"5","D:\\React Projects\\taskbox\\src\\components\\TaskList\\Tasklist.tsx":"6","D:\\React Projects\\taskbox\\src\\components\\Task\\Task.tsx":"7","D:\\React Projects\\taskbox\\src\\components\\Task\\AddTask.tsx":"8","D:\\React Projects\\taskbox\\src\\components\\Task\\addtask.tsx":"9","D:\\React Projects\\taskbox\\src\\components\\Task\\addTask.tsx":"10"},{"size":620,"mtime":1609328387730,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1608208820363,"results":"13","hashOfConfig":"12"},{"size":383,"mtime":1609334727323,"results":"14","hashOfConfig":"12"},{"size":1488,"mtime":1609334514055,"results":"15","hashOfConfig":"12"},{"size":946,"mtime":1609331675173,"results":"16","hashOfConfig":"12"},{"size":1806,"mtime":1609325056660,"results":"17","hashOfConfig":"12"},{"size":1468,"mtime":1609330613007,"results":"18","hashOfConfig":"12"},{"size":721,"mtime":1609332305113,"results":"19","hashOfConfig":"12"},{"size":721,"mtime":1609332305113,"results":"20","hashOfConfig":"12"},{"size":797,"mtime":1609334649781,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"14f4ecw",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\React Projects\\taskbox\\src\\index.tsx",[],["46","47"],"D:\\React Projects\\taskbox\\src\\reportWebVitals.ts",[],"D:\\React Projects\\taskbox\\src\\App.tsx",["48","49"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddTask from './components/Task/addTask';\nimport InboxScreen from './components/InboxScreen/InboxScreen';\nimport Task from './components/Task/Task';\nfunction App() {\n  return (\n    <div className=\"App\">\n       <AddTask/>\n      <h1 className=\"title\">Taskbox</h1>\n      <InboxScreen />\n     \n    </div>\n  );\n}\n\nexport default App;\n","D:\\React Projects\\taskbox\\src\\redux.tsx",[],"D:\\React Projects\\taskbox\\src\\components\\InboxScreen\\InboxScreen.tsx",[],"D:\\React Projects\\taskbox\\src\\components\\TaskList\\Tasklist.tsx",[],"D:\\React Projects\\taskbox\\src\\components\\Task\\Task.tsx",["50"],"import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport '..//..//index.css';\r\nimport {archiveTask,pinTask} from '..//..//redux';\r\nexport interface TaskInterface {\r\n    id: string;\r\n    title: string;\r\n    state: any;\r\n    updatedAt?: Date;\r\n}\r\nexport interface TaskProps {\r\n    task: TaskInterface;\r\n    onArchiveTask?: any;\r\n    onPinTask?: any;\r\n}\r\nconst Task: React.FC<TaskProps> = ({ task: { id, title, state }, onArchiveTask, onPinTask }) => {\r\n    const dispatch=useDispatch();\r\n    return (\r\n        <div className={`list-item ${state}`}>\r\n            <label className=\"checkbox\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    defaultChecked={state === 'TASK_ARCHIVED'}\r\n                    disabled={true}\r\n                    name=\"checked\"\r\n                />\r\n                <span className=\"checkbox-custom\" onClick={() => dispatch(archiveTask(id))} />\r\n            </label>\r\n            <div className=\"title\">\r\n                <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" />\r\n            </div>\r\n\r\n            <div className=\"actions\" onClick={event => event.stopPropagation()}>\r\n                {state !== 'TASK_ARCHIVED' && (\r\n                    <a onClick={() => dispatch(pinTask(id))}>\r\n                        <span className={`icon-star`} />\r\n                    </a>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Task;\r\n",["51","52"],"D:\\React Projects\\taskbox\\src\\components\\Task\\AddTask.tsx",[],"D:\\React Projects\\taskbox\\src\\components\\Task\\addtask.tsx",[],"D:\\React Projects\\taskbox\\src\\components\\Task\\addTask.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":12},{"ruleId":"57","severity":1,"message":"61","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":35,"column":21,"nodeType":"64","endLine":35,"endColumn":62},{"ruleId":"53","replacedBy":"65"},{"ruleId":"55","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Task' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["67"],["68"],"no-global-assign","no-unsafe-negation"]